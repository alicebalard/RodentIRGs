View(data_FINAL)
## to load
load("..data/data_FINAL_OF.RData")
## to load
load("../data/data_FINAL_OF.RData")
## Check orthogroups
data_FINAL$OG
## Check orthogroups
table(data_FINAL$OG)
## Check orthogroups
table(data_FINAL$OG, data_FINAL$Name_Bekpen_2005)
## We match the OrthoFinder results with the known IRG names in Mmus
tabRef <- read.csv("../data/Table1_IRGs_naming.csv")
tabOF <- read.csv("../data/orthofinder_results/N0_HOG_IRG.tsv", sep="\t")
## We match the OrthoFinder results with the known IRG names in Mmus
tabRef <- read.csv("../data/Table1_IRGs_naming.csv")
tabOF <- read.csv("../data/orthofinder_results/N0_HOG_IRG.tsv", sep="\t")
tabRef <- tabRef[c("Name_Bekpen_2005", "proteins_GRCm39")]
View(tabOF)
## rm empty rows: pseudo genes, or not found (Irgb4)
tabRef <- tabRef[!tabRef$proteins_GRCm39 %in% "",]
tabRef <- tabRef[!tabRef$proteins_GRCm39 %in% "?",]
tabRef$proteins_GRCm39  <- gsub(" ", "", tabRef$proteins_GRCm39)
## one protein name per line with amazing separate_rows()
tabRef <- data.frame(separate_rows(tabRef, proteins_GRCm39, sep = ";"))
library(tidyr)
library(rentrez) # to retrieve NCBI sequences
library(tidyverse)
## one protein name per line with amazing separate_rows()
tabRef <- data.frame(separate_rows(tabRef, proteins_GRCm39, sep = ";"))
tabOF <- data.frame(separate_rows(tabOF, Mmus_GCF_000001635.27_GRCm39_protein, sep=", "))
# rename a column before merging
tabOF$proteins_GRCm39 <- tabOF$Mmus_GCF_000001635.27_GRCm39_protein
# merge
tabMERGED <- merge(tabRef, tabOF)
nrow(tabMERGED)
View(tabMERGED)
View(tabOF)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r, message=FALSE}
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(reshape2)
library(lmtest)
library(ggeffects)
library(epiR) # for parasite calculation
## for map:
library(cowplot)
library(ggmap)
library(ggrepel)
library(png)
library(grid)
## for table:
library(flextable) #https://ardata-fr.github.io/flextable-book/layout-1.html#change-header-labels
library(scales)
library(webshot2) # to save ft table as png
library(pscl) # for zero inflated model
library(MASS) # for glm.nb
MYDIR <- "~/Documents/pro/Git/EPI-TRADEOFF/gitignore/"
## Load data from dissection:
parasTable <- read.table(paste0(MYDIR, "data/ParasiteCount_sept2021.csv"), sep = ",", header = T)
## Correction: the NA of parasite counts within guts are in fact zeros, they were checked but none was found
# NB for parasites from gills: a majority of fish did not have gills
# (they were previously removed for sequencing)
parasiteVec <- names(parasTable)[6:20]
parasTable[parasiteVec][is.na(parasTable[parasiteVec])] <- 0
# Prepare the dataset for merging with metadata:
parasTable$eppi_tube_code <-paste0("GA_14_", parasTable$FishID.addGA.14partout.)
names(parasTable)[names(parasTable) %in% "FishID.addGA.14partout."] <- "FishID"
parasTable$population <- sapply(strsplit(parasTable$FishID, "_"), `[`, 1)
# Load metadata
metaData <- read.table(paste0(MYDIR, "data/stickles_6pop_for_Alice_v2_corrected.csv"), sep = ",", header = T)
# merge both
fullDF <- merge(parasTable, metaData) # 3 lost + 1 not in parasTable
# order factor "populatioN" from West to East
popOrderW2E <- c("SYL", "KIE", "FAL", "NYN", "BAR", "LET", "PUU")
fullDF$population <- factor(fullDF$population, levels = popOrderW2E)
fullDF$cyatho_cryptocotyle <- fullDF$cryptocotyle + fullDF$cyathocotyle
newParasiteVec <- c("cyatho_cryptocotyle", parasiteVec[-c(4,5)])
forMap <- metaData[!duplicated(metaData$site_name),]
area <- get_stamenmap(bbox = c(min(forMap$site_coords_lon)-3, min(forMap$site_coords_lat)-3,
max(forMap$site_coords_lon)+3, max(forMap$site_coords_lat)+3),
format = "svg", zoom =  5)
mymap <- ggmap(area) +
geom_point(data = forMap, shape = 21, size = 2,
aes(site_coords_lon, site_coords_lat), alpha = .4) +
geom_label_repel(data = forMap,aes(site_coords_lon, site_coords_lat, label = site_name,
fill =salinity), col = "white") +
scale_fill_gradient("Salinity", high="red",low="blue")
mymap
png(filename = paste0(MYDIR, "figures/map.png"))
mymap
dev.off()
table(fullDF$population)
table(fullDF$sex, fullDF$population)
fullDF$sex_dissec[fullDF$sex_dissec %in%  ""] <- "U" # unknown, homogenise
table(fullDF$sex, fullDF$sex_dissec)
plotSexlength <- ggplot(fullDF,
aes(x=population, y=length_standard))+
geom_violin()+
geom_boxplot(width=0.1) +
geom_jitter(aes(fill=sex), position=position_jitter(height=0, width=0.3), pch=21, size =2, alpha=.4) +
scale_fill_manual(values=c("red", "blue", "grey")) +
theme_minimal()
plotSexlength
png(paste0(MYDIR, "figures/plot_sexLengthDistrib.png"), width = 2000, height = 1500, res = 300)
plotSexlength
dev.off()
youngDF <- fullDF[fullDF$length_standard < 40,]
table(youngDF$population)
youngLongDF <- melt(youngDF[c("FishID", "sex", "population", newParasiteVec)],
id.vars = c("FishID", "sex", "population"))
myQuantitativeParasitology <- function(x){
intensity <- median(x[x>0]) #round(median(x[x>0]),3)
abundance <- median(x) #round(median(x), 3)
max <- max(x)
Ni <- length(x)
NiPos <- length(x[x>0])
# Confidence intervals for prevalence calculated with Sterne's exact method
sternetest <- epiR::epi.prev(pos = length(x[x > 0]), tested = length(x),
se = 1, sp=1, conf.level = .95, method = "sterne")
cilow <- sternetest$ap["lower"]
cihigh <- sternetest$ap["upper"]
prevalence <- sternetest$ap["est"]
return(data.frame(round(prevalence,1), round(cilow,1), round(cihigh,1),
intensity, abundance))
}
prevDF <- youngLongDF[c("population", "variable", "value")] %>%
group_by(variable,population) %>%
group_modify(~ myQuantitativeParasitology(.x$value)) %>%
as.data.frame
## Format for table
prevDF$prevalence <- prevDF$est
prevDF <- reshape(prevDF[c("variable", "population", "prevalence", "intensity")],
idvar = "variable", timevar = "population", direction = "wide")
# Prepare table with flextable https://davidgohel.github.io/flextable/index.html
# reorder population West to East
popOrderW2E <- c("SYL", "KIE", "FAL", "NYN", "BAR", "LET", "PUU")
prevDF <- prevDF[c("variable", apply(expand.grid(c("prevalence", "intensity"), popOrderW2E), 1, paste, collapse="."))]
## Make headers
paras_header <- data.frame(
col_keys = names(prevDF),
line2 = c("Parasite", sapply(strsplit(names(prevDF), "\\."), `[`, 2)[-1]),
line3 = c("Parasite", sapply(strsplit(names(prevDF), "\\."), `[`, 1)[-1])
)
## Scale for bg color
colourer <- col_numeric(
palette = c("transparent", "red"),
domain = c(0, 60))
ft <- flextable(prevDF, col_keys = paras_header$col_keys)
ft <- set_header_df(ft, mapping = paras_header, key = "col_keys" ) %>%
merge_v(part = "header", j = 1) %>%
merge_h(part = "header", i = 1) %>%
theme_booktabs(bold_header = TRUE) %>%
align(align = "center", part = "all") %>%
bg(
bg = colourer,
j = ~ . -variable,
part = "body") %>%
vline(j = c(1, 3, 5, 7, 9, 11, 13), border = fp_border_default())
ft
## Save manually parasiteTable.png width 1645 height 500
table(youngDF$cyatho_cryptocotyle>0, youngDF$population)
ggplot(data=youngDF, aes(x=population, y=cyatho_cryptocotyle)) +
geom_boxplot(aes(fill=sex)) +
geom_jitter(aes(fill=sex),
position=position_jitter(height=0, width=0.3), pch=21, size =2, alpha=0.3) +
scale_fill_manual(values = c("red","blue", "grey")) +
theme_bw()
table(youngDF$population, youngDF$cyatho_cryptocotyle >0)
reducedDF <- youngDF[!youngDF$population %in% c("KIE", "FAL", "BAR"),]
reducedDF$population <- droplevels(reducedDF$population)
ggplot(reducedDF, aes(cyatho_cryptocotyle, fill = population)) +
geom_histogram() +
facet_grid(population ~ ., margins=TRUE, scales="free_y")
summary(mod.nb <- glm.nb(cyatho_cryptocotyle ~ population + sex + length_standard, data = reducedDF))
## Check for over/underdispersion in the model (we want it close to 1)
# Dispersion Statistic
E2 <- resid(mod.nb, type = "pearson")
N  <- nrow(reducedDF)
p  <- length(coef(mod.nb)) + 1 # '+1' is for variance parameter in NB
print("Dispersion Statistic:")
sum(E2^2) / (N - p)
# We test for goodness-of-fit of the model with a chi-square test based on the residual deviance and degrees of freedom. Fits the data if p > 0.05
print("GOF:")
1 - pchisq(summary(mod.nb)$deviance, summary(mod.nb)$df.residual)
m0 <- update(mod.nb, . ~ 1)
pchisq(2 * (logLik(mod.nb) - logLik(m0)), df = 3, lower.tail=FALSE)
summary(mod.nb)
mod.nb_nosex <- update(mod.nb, . ~ . - sex)
lrtest(mod.nb, mod.nb_nosex)
mod.nb_nolength_standard <- update(mod.nb, . ~ . - length_standard)
lrtest(mod.nb, mod.nb_nolength_standard)
mod.nb_nopop <- update(mod.nb, . ~ . - population)
lrtest(mod.nb, mod.nb_nopop)
## Method 2: step
step(mod.nb)
## Method 2: step
summary(step(mod.nb))
